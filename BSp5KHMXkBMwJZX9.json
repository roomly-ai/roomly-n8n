{
  "active": true,
  "connections": {
    "n8n": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config": {
      "main": [
        [
          {
            "node": "Get file data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Get File": {
      "main": [
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is new": {
      "main": [
        [
          {
            "node": "Create new file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Items": {
      "main": [
        [
          {
            "node": "isDiffOrNew",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "isDiffOrNew": {
      "main": [
        [
          {
            "node": "Create sub path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Status": {
      "main": [
        [
          {
            "node": "Same file - Do nothing",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is different",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "File is new",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Failed Flows": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get file data": {
      "main": [
        [
          {
            "node": "If file too large",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create new file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create sub path": {
      "main": [
        [
          {
            "node": "Check Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Completed Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Execute Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Failed Flows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Starting Message": {
      "main": [
        [
          {
            "node": "n8n",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File is different": {
      "main": [
        [
          {
            "node": "Edit existing file",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If file too large": {
      "main": [
        [
          {
            "node": "Get File",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit existing file": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "On clicking 'execute'": {
      "main": [
        [
          {
            "node": "Starting Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Same file - Do nothing": {
      "main": [
        [
          {
            "node": "Return",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-02-01T06:16:39.416Z",
  "id": "BSp5KHMXkBMwJZX9",
  "meta": {
    "templateId": "1534"
  },
  "name": "Back Up Roomly n8n Workflows To Github",
  "nodes": [
    {
      "parameters": {},
      "id": "421824c2-59a2-441b-aacc-7dadf2ec153b",
      "name": "On clicking 'execute'",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        860,
        320
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Subworkflow",
        "height": 731.7039821513649,
        "width": 1910.7813046051347,
        "color": 6
      },
      "id": "c6024a57-1957-4714-84e3-8d326c83cd89",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        700
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "07691901-a8d2-4891-860b-1d672361021b",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        440,
        1080
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "filters": {},
        "requestOptions": {}
      },
      "id": "2b1dd138-7872-42ea-9882-8750ef4cf227",
      "name": "n8n",
      "type": "n8n-nodes-base.n8n",
      "position": [
        1260,
        420
      ],
      "typeVersion": 1,
      "credentials": {
        "n8nApi": {
          "id": "KprhG3lfacF5aoZZ",
          "name": "n8n account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
              "name": "Done",
              "type": "boolean",
              "value": true
            }
          ]
        },
        "options": {}
      },
      "id": "96c0c6a7-2a11-441d-8177-e0a18030daf9",
      "name": "Return",
      "type": "n8n-nodes-base.set",
      "position": [
        2100,
        900
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "url": "={{ $json.download_url }}",
        "options": {}
      },
      "id": "6715d1ff-a1f0-4e1a-b96e-f680d1495047",
      "name": "Get File",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1060,
        780
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
              "operator": {
                "type": "string",
                "operation": "empty",
                "singleValue": true
              },
              "leftValue": "={{ $json.content }}",
              "rightValue": ""
            },
            {
              "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
              "operator": {
                "type": "string",
                "operation": "notExists",
                "singleValue": true
              },
              "leftValue": "={{ $json.error }}",
              "rightValue": ""
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "443b18e8-c05b-444f-b323-dea0b3041939",
      "name": "If file too large",
      "type": "n8n-nodes-base.if",
      "position": [
        820,
        800
      ],
      "typeVersion": 2
    },
    {
      "parameters": {},
      "id": "e460a2cd-f7af-4551-8ea2-84d9b9e5cb7f",
      "name": "Merge Items",
      "type": "n8n-nodes-base.merge",
      "position": [
        820,
        1060
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();\n"
      },
      "id": "f795180a-66aa-4a86-acb0-96cf8c487db0",
      "name": "isDiffOrNew",
      "type": "n8n-nodes-base.code",
      "position": [
        1020,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.github_status}}",
        "rules": {
          "rules": [
            {
              "value2": "same"
            },
            {
              "value2": "different",
              "output": 1
            },
            {
              "value2": "new",
              "output": 2
            }
          ]
        }
      },
      "id": "30e7d6fc-327e-4693-95ce-376a3b1f145c",
      "name": "Check Status",
      "type": "n8n-nodes-base.switch",
      "position": [
        1420,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "36f12309-c7fe-446f-9571-bd1005c18ed8",
      "name": "Same file - Do nothing",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1640,
        900
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "45f0eaa7-259b-4908-b567-af2b3b5abb6d",
      "name": "File is different",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1640,
        1060
      ],
      "typeVersion": 1
    },
    {
      "parameters": {},
      "id": "d16ec06b-7a3f-486e-8328-935ed3b4d565",
      "name": "File is new",
      "type": "n8n-nodes-base.noOp",
      "position": [
        1640,
        1260
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "resource": "file",
        "owner": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $('Config').item.json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{ $('Execute Workflow Trigger').first().json.id.concat(\".json\") }}",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "cdc7f306-b7d2-4de1-8e44-0bd8d49a679f",
      "name": "Create new file",
      "type": "n8n-nodes-base.github",
      "position": [
        1860,
        1260
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "W1STldryMVOspUYF",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "edit",
        "owner": {
          "__rl": true,
          "value": "={{ $json.content_decoded.repo_owner }}",
          "mode": ""
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.content_decoded.repo_name }}",
          "mode": ""
        },
        "filePath": "={{$('Execute Workflow Trigger').first().json.id}}.json",
        "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
        "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
      },
      "id": "9785333a-4a86-448d-afc2-58b0aa50ea96",
      "name": "Edit existing file",
      "type": "n8n-nodes-base.github",
      "position": [
        1860,
        1060
      ],
      "typeVersion": 1,
      "credentials": {
        "githubApi": {
          "id": "W1STldryMVOspUYF",
          "name": "GitHub account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "806db72c-c9f6-461d-be1a-1e6867a25382",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1460,
        420
      ],
      "typeVersion": 3
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "triggerAtHour": 1,
              "triggerAtMinute": 33
            }
          ]
        }
      },
      "id": "e5c433e4-bf56-4a0a-906c-7d74f6fe7287",
      "name": "Schedule Trigger",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        860,
        520
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "dae43d3b-56e5-4098-b602-862ebf5cd073",
              "name": "subPath",
              "type": "string",
              "value": "={{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[0] }}/{{ $('Execute Workflow Trigger').first().json.createdAt.split('-')[1] }}/"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "f6b566cb-0a15-4792-ba27-d6cd2a6c9453",
      "name": "Create sub path",
      "type": "n8n-nodes-base.set",
      "position": [
        1220,
        1060
      ],
      "typeVersion": 3.3
    },
    {
      "parameters": {
        "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub every 24 hours.\n\nThe files are saved into folders using `YYYY/MM/` for the directory path and `ID.json` for the filename.\n\nThe Repo Owner, Repo Name and Main folder are set using the **Variables** feature but can be replaced with the `Config` node in the subworkflow. \n\nThe workflow runs calls itself to help reduce memory usage, Once the workflow has completed it will send an optional notification to Slack.\n\n### Time to Run\nTested with 1423 workflows on `1.44.1` it took under 30 minutes for the first run and under 12 minutes once the initial run is complete.",
        "height": 417,
        "width": 385,
        "color": 4
      },
      "id": "9e2412f6-df25-4c12-8faf-0200558b537c",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        380,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "## Main workflow loop",
        "height": 416.1856906618075,
        "width": 1272.6408145680155,
        "color": 7
      },
      "id": "00fdb977-4f3e-49f6-81c3-bc7f9520914f",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        820,
        240
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08BAHHF490",
          "mode": "list",
          "cachedResultName": "tech-related"
        },
        "text": "=:information_source:  Starting Workflow Backup [{{ $execution.id }}]",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "0c00a374-566a-49c7-80de-66a991c4bf69",
      "name": "Starting Message",
      "type": "n8n-nodes-base.slack",
      "position": [
        1100,
        420
      ],
      "webhookId": "c02eb407-5547-4aa0-9ebf-46dab67b63b6",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "vQp7BR45bihPVTtF",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "workflowId": "={{ $workflow.id }}",
        "mode": "each",
        "options": {}
      },
      "id": "eb7d15be-7f5d-4e39-837b-06d740685af3",
      "name": "Execute Workflow",
      "type": "n8n-nodes-base.executeWorkflow",
      "position": [
        1660,
        440
      ],
      "typeVersion": 1,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08BAHHF490",
          "mode": "list",
          "cachedResultName": "tech-related"
        },
        "text": "=✅ Backup has completed - {{ $('n8n').all().length }} workflows have been processed.",
        "otherOptions": {}
      },
      "id": "c831a0eb-95e1-46b3-bbf8-5d5bd928ca0a",
      "name": "Completed Notification",
      "type": "n8n-nodes-base.slack",
      "position": [
        1680,
        260
      ],
      "webhookId": "a0c6e8c8-5d71-40fa-b02b-63a7ed5726c4",
      "executeOnce": true,
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "vQp7BR45bihPVTtF",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C08BAHHF490",
          "mode": "list",
          "cachedResultName": "tech-related"
        },
        "text": "=:x: Failed to backup {{ $('Loop Over Items').item.json.id }}",
        "otherOptions": {
          "includeLinkToWorkflow": false
        }
      },
      "id": "00864cb8-c8e4-4324-be1b-7d093e1bc3bf",
      "name": "Failed Flows",
      "type": "n8n-nodes-base.slack",
      "position": [
        1880,
        460
      ],
      "webhookId": "2a092edb-de12-490f-931b-34d70e7d7696",
      "typeVersion": 2.2,
      "credentials": {
        "slackOAuth2Api": {
          "id": "vQp7BR45bihPVTtF",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "resource": "file",
        "operation": "get",
        "owner": {
          "__rl": true,
          "value": "={{ $json.repo_owner }}",
          "mode": "name"
        },
        "repository": {
          "__rl": true,
          "value": "={{ $json.repo_name }}",
          "mode": "name"
        },
        "filePath": "={{$json.id}}.json",
        "asBinaryProperty": false,
        "additionalParameters": {}
      },
      "id": "e4d70af5-5c21-4340-8054-7ba0203f3ee1",
      "name": "Get file data",
      "type": "n8n-nodes-base.github",
      "position": [
        620,
        800
      ],
      "typeVersion": 1,
      "alwaysOutputData": true,
      "credentials": {
        "githubApi": {
          "id": "W1STldryMVOspUYF",
          "name": "GitHub account"
        }
      },
      "continueOnFail": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "8f6d1741-772f-462a-811f-4c334185e4f0",
              "name": "repo_owner",
              "type": "string",
              "value": "=roomly-ai"
            },
            {
              "id": "8cac215c-4fd7-422f-9fd2-6b2d1e5e0383",
              "name": "repo_name",
              "type": "string",
              "value": "=roomly-n8n"
            },
            {
              "id": "eee305e9-4164-462a-86bd-80f0d58a31ae",
              "name": "repo_path",
              "type": "string",
              "value": "=https://github.com/roomly-ai/roomly-n8n"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "id": "42ad4762-26fb-4686-9016-729e95c95324",
      "name": "Config",
      "type": "n8n-nodes-base.set",
      "position": [
        620,
        1080
      ],
      "typeVersion": 3.4
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "createdAt": "2024-12-24T06:47:39.966Z",
          "updatedAt": "2024-12-27T13:49:54.000Z",
          "id": "18nUhxIF8IMkX7Xq",
          "name": "Victoria Renting Law Bot",
          "active": false,
          "nodes": [
            {
              "parameters": {},
              "id": "296a935f-bd02-44bc-9e1e-3e4d6a307e38",
              "name": "When clicking \"Execute Workflow\"",
              "type": "n8n-nodes-base.manualTrigger",
              "position": [
                680,
                340
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "61a38c00-f196-4b01-9274-c5e0f4c511bc",
              "name": "Embeddings OpenAI",
              "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
              "position": [
                1480,
                560
              ],
              "typeVersion": 1,
              "credentials": {
                "openAiApi": {
                  "id": "ASOiAIC6Muob4zyk",
                  "name": "OpenAi account 2"
                }
              }
            },
            {
              "parameters": {
                "content": "## 1. Setup: Fetch file from Google Drive, split it into chunks and insert into a vector database\nNote that running this part multiple times will insert multiple copies into your DB",
                "height": 728.4168721167887,
                "width": 1086.039382705461,
                "color": 7
              },
              "id": "816066bd-02e8-4de2-bcee-ab81d890435a",
              "name": "Sticky Note",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                840,
                160
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "dataType": "binary",
                "options": {
                  "metadata": {
                    "metadataValues": [
                      {
                        "name": "file_url",
                        "value": "={{ $json.file_url }}"
                      },
                      {
                        "name": "file_name",
                        "value": "={{ $('Add in metadata').item.json.file_name }}"
                      }
                    ]
                  }
                }
              },
              "id": "30cd81ad-d658-4c33-9a38-68e33b74cdae",
              "name": "Default Data Loader",
              "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
              "position": [
                1660,
                560
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "mode": "raw",
                "jsonOutput": "{\n  \"Residential Tenancies Act 1997\": \"https://www.legislation.vic.gov.au/in-force/acts/residential-tenancies-act-1997\",\n  \"Residential Tenancies Regulations 2021\": \"https://www.legislation.vic.gov.au/in-force/statutory-rules/residential-tenancies-regulations-2021\",\n  \"Rooming House Operators Act 2016\": \"https://www.legislation.vic.gov.au/in-force/acts/rooming-house-operators-act-2016\",\n  \"Rooming House Operators Regulations 2017\": \"https://www.legislation.vic.gov.au/in-force/statutory-rules/rooming-house-operators-regulations-2017\"\n}\n\n",
                "options": {}
              },
              "id": "718f09e0-67be-41a6-a90d-f58e64ffee4d",
              "name": "Set file URL in Google Drive",
              "type": "n8n-nodes-base.set",
              "position": [
                900,
                340
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "content": "# Try me out\n1. In Pinecone, create an index with 1536 dimensions and select it in the two vector store nodes\n2. Populate Pinecone by clicking the 'test workflow' button below\n3. Click the 'chat' button below and enter the following:\n\n_Which email provider does the creator of Bitcoin use?_",
                "height": 350.7942096493649
              },
              "id": "8f536a96-a6b1-4291-9cac-765759c396a8",
              "name": "Sticky Note2",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                380,
                240
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "mode": "runOnceForEachItem",
                "jsCode": "// Add a new field called 'myNewField' to the JSON of the item\n$input.item.json.file_name = $input.item.binary.data.fileName;\n$input.item.json.file_ext = $input.item.binary.data.fileExtension;\n$input.item.json.file_url = $('Set file URL in Google Drive').item.json.file_url\n\nreturn $input.item;"
              },
              "id": "ec7c9407-93c3-47a6-90f2-6e6056f5af84",
              "name": "Add in metadata",
              "type": "n8n-nodes-base.code",
              "position": [
                1320,
                340
              ],
              "typeVersion": 2
            },
            {
              "parameters": {
                "operation": "download",
                "fileId": {
                  "__rl": true,
                  "mode": "list",
                  "value": ""
                },
                "options": {}
              },
              "id": "ab3131d5-4b04-48b4-b5d5-787e3ed18917",
              "name": "Download file",
              "type": "n8n-nodes-base.googleDrive",
              "position": [
                1100,
                340
              ],
              "typeVersion": 3,
              "credentials": {
                "googleDriveOAuth2Api": {
                  "id": "rZeAMw7t65IR3xhU",
                  "name": "Google Drive account 2"
                }
              }
            },
            {
              "parameters": {},
              "id": "764a865c-7efe-4eec-a34c-cc87c5f085b1",
              "name": "Chat Trigger",
              "type": "@n8n/n8n-nodes-langchain.chatTrigger",
              "position": [
                680,
                1060
              ],
              "webhookId": "1727c687-aed0-49cf-96af-e7796819fbb3",
              "typeVersion": 1
            },
            {
              "parameters": {
                "jsCode": "let out = \"\"\nfor (const i in $input.all()) {\n  let itemText = \"--- CHUNK \" + i + \" ---\\n\"\n  itemText += $input.all()[i].json.document.pageContent + \"\\n\"\n  itemText += \"\\n\"\n  out += itemText\n}\n\nreturn {\n  'context': out\n};"
              },
              "id": "36cd9a8d-7d89-49b3-8a81-baa278201a21",
              "name": "Prepare chunks",
              "type": "n8n-nodes-base.code",
              "position": [
                1500,
                1060
              ],
              "typeVersion": 2
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "6356bce2-9aae-43ed-97ce-a27cbfb80df9",
              "name": "Embeddings OpenAI2",
              "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
              "position": [
                1120,
                1280
              ],
              "typeVersion": 1,
              "credentials": {
                "openAiApi": {
                  "id": "ASOiAIC6Muob4zyk",
                  "name": "OpenAi account 2"
                }
              }
            },
            {
              "parameters": {
                "options": {}
              },
              "id": "8fb697ea-f2e5-4105-b6c8-ab869c2e5ab2",
              "name": "OpenAI Chat Model",
              "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
              "position": [
                1740,
                1280
              ],
              "typeVersion": 1,
              "credentials": {
                "openAiApi": {
                  "id": "ASOiAIC6Muob4zyk",
                  "name": "OpenAi account 2"
                }
              }
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "236047ff-75a2-47fd-b338-1e9763c4015e",
                      "name": "chunks",
                      "type": "number",
                      "value": 4
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "9a2b0152-d008-42cb-bc10-495135d5ef45",
              "name": "Set max chunks to send to model",
              "type": "n8n-nodes-base.set",
              "position": [
                900,
                1060
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "jsonSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"answer\": {\n      \"type\": \"string\"\n    },\n    \"citations\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"number\"\n      }\n    }\n  }\n}"
              },
              "id": "f2ab813f-0f0c-4d3a-a1de-7896ad736698",
              "name": "Structured Output Parser",
              "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
              "position": [
                1920,
                1280
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "67ecefcf-a30c-4cc4-89ca-b9b23edd6585",
                      "name": "citations",
                      "type": "array",
                      "value": "={{ $json.citations.map(i => '[' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata.file_name + ', lines ' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.from'] + '-' + $('Get top chunks matching query').all()[$json.citations].json.document.metadata['loc.lines.to'] + ']') }}"
                    }
                  ]
                },
                "includeOtherFields": true,
                "options": {}
              },
              "id": "ada2a38b-0f6e-4115-97c0-000e97a5e62e",
              "name": "Compose citations",
              "type": "n8n-nodes-base.set",
              "position": [
                2100,
                1060
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "assignments": {
                  "assignments": [
                    {
                      "id": "d77956c4-0ff4-4c64-80c2-9da9d4c8ad34",
                      "name": "text",
                      "type": "string",
                      "value": "={{ $json.answer }} {{ $if(!$json.citations.isEmpty(), \"\\n\" + $json.citations.join(\"\"), '') }}"
                    }
                  ]
                },
                "options": {}
              },
              "id": "8e115308-532e-4afd-b766-78e54c861f33",
              "name": "Generate response",
              "type": "n8n-nodes-base.set",
              "position": [
                2320,
                1060
              ],
              "typeVersion": 3.3
            },
            {
              "parameters": {
                "content": "## 2. Chat with file, getting citations in reponse",
                "height": 548.5086735412393,
                "width": 1693.989843925635,
                "color": 7
              },
              "id": "40c5f9d8-38da-41ac-ab99-98f6010ba8bf",
              "name": "Sticky Note1",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                848.715870642978,
                940
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "promptType": "define",
                "text": "=Use the following pieces of context to answer the question at the end. If you don't know the answer, just say that you don't know, don't try to make up an answer. Important: In your response, also include the the indexes of the chunks you used to generate the answer.\n\n{{ $json.context }}\n\nQuestion: {{ $(\"Chat Trigger\").first().json.chatInput }}\nHelpful Answer:",
                "hasOutputParser": true
              },
              "id": "ef357a2b-bc8d-43f7-982f-73c3a85a60be",
              "name": "Answer the query based on chunks",
              "type": "@n8n/n8n-nodes-langchain.chainLlm",
              "position": [
                1720,
                1060
              ],
              "typeVersion": 1.4
            },
            {
              "parameters": {
                "content": "Will fetch the Bitcoin whitepaper, but you can change this",
                "height": 257.75985739596473,
                "width": 179.58883583572606,
                "color": 7
              },
              "id": "cbb1b60c-b396-4f0e-8dc6-dfa41dbb178e",
              "name": "Sticky Note4",
              "type": "n8n-nodes-base.stickyNote",
              "position": [
                862.5682587140436,
                250.50554725042372
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "chunkSize": 3000,
                "chunkOverlap": 200,
                "options": {}
              },
              "id": "c501568b-fb49-487d-bced-757e3d7ed13c",
              "name": "Recursive Character Text Splitter",
              "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
              "position": [
                1660,
                720
              ],
              "typeVersion": 1
            },
            {
              "parameters": {
                "mode": "insert",
                "pineconeIndex": {
                  "__rl": true,
                  "value": "roomly-law",
                  "mode": "list",
                  "cachedResultName": "roomly-law"
                },
                "options": {}
              },
              "id": "d8d210cf-f12e-4e82-9b28-f531d2ff14a6",
              "name": "Add to Pinecone vector store",
              "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
              "position": [
                1540,
                340
              ],
              "typeVersion": 1,
              "credentials": {
                "pineconeApi": {
                  "id": "SX6ReUfMXbkJP2HK",
                  "name": "PineconeApi account"
                }
              }
            },
            {
              "parameters": {
                "mode": "load",
                "pineconeIndex": {
                  "__rl": true,
                  "value": "roomly-law",
                  "mode": "list",
                  "cachedResultName": "roomly-law"
                },
                "prompt": "={{ $json.chatInput }}",
                "topK": "={{ $json.chunks }}",
                "options": {}
              },
              "id": "1a5511b9-5a24-40d5-a5b1-830376226e4e",
              "name": "Get top chunks matching query",
              "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
              "position": [
                1120,
                1060
              ],
              "typeVersion": 1,
              "credentials": {
                "pineconeApi": {
                  "id": "SX6ReUfMXbkJP2HK",
                  "name": "PineconeApi account"
                }
              }
            }
          ],
          "connections": {
            "Chat Trigger": {
              "main": [
                [
                  {
                    "node": "Set max chunks to send to model",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Download file": {
              "main": [
                [
                  {
                    "node": "Add in metadata",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Prepare chunks": {
              "main": [
                [
                  {
                    "node": "Answer the query based on chunks",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Add in metadata": {
              "main": [
                [
                  {
                    "node": "Add to Pinecone vector store",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Compose citations": {
              "main": [
                [
                  {
                    "node": "Generate response",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Embeddings OpenAI": {
              "ai_embedding": [
                [
                  {
                    "node": "Add to Pinecone vector store",
                    "type": "ai_embedding",
                    "index": 0
                  }
                ]
              ]
            },
            "OpenAI Chat Model": {
              "ai_languageModel": [
                [
                  {
                    "node": "Answer the query based on chunks",
                    "type": "ai_languageModel",
                    "index": 0
                  }
                ]
              ]
            },
            "Embeddings OpenAI2": {
              "ai_embedding": [
                [
                  {
                    "node": "Get top chunks matching query",
                    "type": "ai_embedding",
                    "index": 0
                  }
                ]
              ]
            },
            "Default Data Loader": {
              "ai_document": [
                [
                  {
                    "node": "Add to Pinecone vector store",
                    "type": "ai_document",
                    "index": 0
                  }
                ]
              ]
            },
            "Structured Output Parser": {
              "ai_outputParser": [
                [
                  {
                    "node": "Answer the query based on chunks",
                    "type": "ai_outputParser",
                    "index": 0
                  }
                ]
              ]
            },
            "Set file URL in Google Drive": {
              "main": [
                [
                  {
                    "node": "Download file",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Set max chunks to send to model": {
              "main": [
                [
                  {
                    "node": "Get top chunks matching query",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Answer the query based on chunks": {
              "main": [
                [
                  {
                    "node": "Compose citations",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "When clicking \"Execute Workflow\"": {
              "main": [
                [
                  {
                    "node": "Set file URL in Google Drive",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            },
            "Recursive Character Text Splitter": {
              "ai_textSplitter": [
                [
                  {
                    "node": "Default Data Loader",
                    "type": "ai_textSplitter",
                    "index": 0
                  }
                ]
              ]
            },
            "Get top chunks matching query": {
              "main": [
                [
                  {
                    "node": "Prepare chunks",
                    "type": "main",
                    "index": 0
                  }
                ]
              ]
            }
          },
          "settings": {
            "callerPolicy": "workflowsFromSameOwner",
            "executionOrder": "v0"
          },
          "staticData": null,
          "meta": {
            "templateId": "2165",
            "templateCredsSetupCompleted": true
          },
          "pinData": {},
          "versionId": "a37a4643-7e4d-4acc-a7c2-03294d93e2e8",
          "triggerCount": 2,
          "shared": [
            {
              "createdAt": "2025-02-01T07:07:36.884Z",
              "updatedAt": "2025-02-01T07:07:36.884Z",
              "role": "workflow:owner",
              "workflowId": "18nUhxIF8IMkX7Xq",
              "projectId": "7FHVl3KliU2w1thC",
              "project": {
                "createdAt": "2024-12-02T13:53:12.568Z",
                "updatedAt": "2024-12-02T13:53:14.245Z",
                "id": "7FHVl3KliU2w1thC",
                "name": "Liman Capital <limancapital@gmail.com>",
                "type": "personal",
                "projectRelations": [
                  {
                    "createdAt": "2024-12-02T13:53:12.569Z",
                    "updatedAt": "2024-12-02T13:53:12.569Z",
                    "role": "project:personalOwner",
                    "userId": "a96fbc37-00f2-4e7d-9516-138da321c748",
                    "projectId": "7FHVl3KliU2w1thC",
                    "user": {
                      "createdAt": "2024-12-02T13:53:10.219Z",
                      "updatedAt": "2025-01-20T05:25:46.679Z",
                      "id": "a96fbc37-00f2-4e7d-9516-138da321c748",
                      "email": "limancapital@gmail.com",
                      "firstName": "Liman",
                      "lastName": "Capital",
                      "personalizationAnswers": null,
                      "settings": {
                        "userActivated": true,
                        "firstSuccessfulWorkflowId": "7z1jVRcvwi0IUTzx",
                        "userActivatedAt": 1735283990141,
                        "npsSurvey": {
                          "responded": true,
                          "lastShownAt": 1737350743229
                        },
                        "isOnboarded": true
                      },
                      "role": "global:owner",
                      "disabled": false,
                      "mfaEnabled": false,
                      "isPending": false,
                      "isOwner": true
                    }
                  }
                ]
              }
            }
          ],
          "tags": [
            {
              "createdAt": "2024-12-27T03:27:14.730Z",
              "updatedAt": "2024-12-27T03:27:14.730Z",
              "id": "hnMbZA1tTeLmE2Wq",
              "name": "roomly-law"
            }
          ]
        }
      }
    ]
  },
  "repo_name": "roomly-n8n",
  "repo_owner": "roomly-ai",
  "repo_path": "https://github.com/roomly-ai/roomly-n8n",
  "settings": {},
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-02-03T08:46:40.000Z",
  "versionId": "81e7a289-5e3b-4f7b-bf2c-45eca31434dc"
}